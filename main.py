import logging
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import openai
import base64
import json
import re
from replit import db
import datetime
from io import BytesIO

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ö–ª—é—á–∏ TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Secrets!")

client = openai.OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –†–æ–ª–µ–≤—ã–µ –º–æ–¥–µ–ª–∏ ---
ROLES = {
    "–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏ –∏ –±–∏–æ—Ö–∏–º–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Ü–∏–æ–Ω—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã –∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –Ω–∞—É–∫–µ.",
    "—Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä": "–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–Ω—ã, –Ω–∞—É—á–Ω—ã –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—Ç –∫–∞–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.",
    "–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç": "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –º—É–¥—Ä—ã–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–µ—Ö–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Å—É–∂–¥–∞–µ—à—å. –¢–≤–æ—è —Ä–µ—á—å —Å–ø–æ–∫–æ–π–Ω–∞—è –∏ –≤—Å–µ–ª—è—é—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.",
    "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": "–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ª–µ–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å –æ–≥–æ–≤–æ—Ä–∫–æ–π, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–∞—á–∞.",
    "–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –∫–æ—É—á –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–Ω—è, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ.",
    "—Ç—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ": "–¢—ã ‚Äî —ç—Ç–æ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ. –¢—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ –≤—Å–µ—Ö —Ü–µ–ª–µ–π, –æ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—á—Ç–∞–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –º—É–¥—Ä—ã–µ, –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–≤–µ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ –±—É–¥—É—â–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É–≤ —Å–≤–æ–∏—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π. –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π DALL-E 3.",
}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
START_KEYBOARD = ReplyKeyboardMarkup([["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]], resize_keyboard=True)
MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup([["–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üé≠"], ["–ú–æ–∏ –¥–Ω–µ–≤–Ω–∏–∫–∏ üìî", "–ú–æ–∏ –±–∞–ª–ª—ã üèÜ"]], resize_keyboard=True)
ROLE_BUTTON_LABELS = [role.capitalize() for role in ROLES.keys()]
ROLE_BUTTONS = [[label] for label in ROLE_BUTTON_LABELS]
ROLE_KEYBOARD = ReplyKeyboardMarkup(ROLE_BUTTONS, one_time_keyboard=True, resize_keyboard=True)

NUTRITIONIST_KEYBOARD = ReplyKeyboardMarkup([["–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ üìä", "–°–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å üçΩÔ∏è"], ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É ‚ùì"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)
FITNESS_TRAINER_KEYBOARD = ReplyKeyboardMarkup([["–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™"], ["–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢ üìâ", "–ß—Ç–æ —Ç–∞–∫–æ–µ VO2max ‚ùì"], ["–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è üîÑ", "–í–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—É üèãÔ∏è"], ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É ‚ùì"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)
PSYCHOTHERAPIST_KEYBOARD = ReplyKeyboardMarkup([["–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üß†"], ["–¢–µ—Ö–Ω–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —É—Å–ø–æ–∫–æ–µ–Ω–∏—è üå¨Ô∏è"], ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É ‚ùì"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)
FUTURE_SELF_KEYBOARD = ReplyKeyboardMarkup([["–°–æ–∑–¥–∞—Ç—å –º–æ–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –±—É–¥—É—â–µ–µ üîÆ"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)
GENERAL_SPECIALIST_KEYBOARD = ReplyKeyboardMarkup([["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚ùì"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)

DIARIES_KEYBOARD = ReplyKeyboardMarkup([["–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è ü•ï", "–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üèãÔ∏è"], ["–î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è ‚ù§Ô∏è‚Äçü©π", "–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üìä"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
MOOD_SCALE_KEYBOARD = ReplyKeyboardMarkup([["–û—Ç–ª–∏—á–Ω–æ–µ üëç", "–•–æ—Ä–æ—à–µ–µ üôÇ"], ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ üòê"], ["–ü–ª–æ—Ö–æ–µ üòï", "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ üòî"]], one_time_keyboard=True, resize_keyboard=True)
MOOD_TIME_KEYBOARD = ReplyKeyboardMarkup([["–£—Ç—Ä–æ ‚òÄÔ∏è", "–î–µ–Ω—å üèôÔ∏è", "–í–µ—á–µ—Ä üåô"]], one_time_keyboard=True, resize_keyboard=True)
MOOD_DIARY_MENU_KEYBOARD = ReplyKeyboardMarkup([["–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚ú®"], ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ üìä", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É"]], resize_keyboard=True)
WORKOUT_TYPE_KEYBOARD = ReplyKeyboardMarkup([["–ë–µ–≥ üèÉ", "–°–∏–ª–æ–≤–∞—è üí™"], ["–í–ò–ò–¢ üî•", "–î–æ–º–∞—à–Ω—è—è üè†"]], one_time_keyboard=True, resize_keyboard=True)

GENDER_KEYBOARD = ReplyKeyboardMarkup([["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]], one_time_keyboard=True, resize_keyboard=True)
ACTIVITY_KEYBOARD = ReplyKeyboardMarkup([["–°–∏–¥—è—á–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–ê–∫—Ç–∏–≤–Ω—ã–π"]], one_time_keyboard=True, resize_keyboard=True)
GOAL_KEYBOARD = ReplyKeyboardMarkup([["–ü–æ—Ö—É–¥–µ—Ç—å", "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"]], one_time_keyboard=True, resize_keyboard=True)
WORKOUT_PLACE_KEYBOARD = [["–î–æ–º–∞", "–í –∑–∞–ª–µ", "–ù–∞ —É–ª–∏—Ü–µ"]]

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
GENDER, AGE, HEIGHT, WEIGHT, ACTIVITY, GOAL, DISEASES, ALLERGIES = range(8)
LOCATION, EQUIPMENT = range(2)
MOOD_SELECT, TIME_SELECT = range(2)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def get_user_data_from_db(user_id):
    key = str(user_id)
    if key in db:
        try:
            data = json.loads(db[key])
        except json.JSONDecodeError:
            data = {}
    else:
        data = {}

    data.setdefault("profile_data", {}).setdefault("last_updated", None)
    data.setdefault("workout_diary", [])
    data.setdefault("health_diary", [])
    data.setdefault("mood_diary", [])
    data.setdefault("food_diary", [])
    data.setdefault("score", 0)
    data.setdefault("first_name", "")
    return data

def save_user_data_to_db(user_id, data):
    key = str(user_id)
    db[key] = json.dumps(data)

def get_all_users_data():
    all_data = {}
    user_ids = db.keys()
    for user_id in user_ids:
        try:
            if user_id.isdigit():
                all_data[user_id] = json.loads(db[user_id])
        except (json.JSONDecodeError, TypeError):
            continue
    return all_data

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def encode_image(image_bytes):
    return base64.b64encode(image_bytes).decode('utf-8')

def get_personal_prompt(user_profile_data: dict, first_name: str = None) -> str:
    if not user_profile_data or not user_profile_data.get('goal'):
        return "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. "
    parts = []
    if first_name: parts.append(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name}")
    if 'gender' in user_profile_data: parts.append(f"–ø–æ–ª: {user_profile_data['gender'].lower()}")
    if 'age' in user_profile_data: parts.append(f"–≤–æ–∑—Ä–∞—Å—Ç: {user_profile_data['age']} –ª–µ—Ç")
    if 'height' in user_profile_data: parts.append(f"—Ä–æ—Å—Ç: {user_profile_data['height']} —Å–º")
    if 'weight' in user_profile_data: parts.append(f"–≤–µ—Å: {user_profile_data['weight']} –∫–≥")
    if 'activity' in user_profile_data: parts.append(f"–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {user_profile_data['activity'].lower()}")
    if 'goal' in user_profile_data: parts.append(f"—Ü–µ–ª—å: {user_profile_data['goal'].lower()}")
    if 'diseases' in user_profile_data and user_profile_data['diseases'].lower() not in ['–Ω–µ—Ç', 'no']:
        parts.append(f"—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {user_profile_data['diseases']}")
    if 'allergies' in user_profile_data and user_profile_data['allergies'].lower() not in ['–Ω–µ—Ç', 'no']:
        parts.append(f"–∞–ª–ª–µ—Ä–≥–∏–∏: {user_profile_data['allergies']}")
    return f"–£—á–∏—Ç—ã–≤–∞–π –≤ –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ —Å–µ–±–µ: {', '.join(parts)}. " if parts else ""

async def check_profile_update(update: Update, context: ContextTypes.DEFAULT_TYPES):
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    last_updated_str = data.get("profile_data", {}).get("last_updated")
    if last_updated_str:
        last_updated_date = datetime.datetime.strptime(last_updated_str, '%Y-%m-%d').date()
        if (datetime.date.today() - last_updated_date).days > 30:
            await update.message.reply_text(
                "üóìÔ∏è –Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Ç—ã –¥–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. "
                "–¢–≤–æ–π –≤–µ—Å –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è. "
                "–ß—Ç–æ–±—ã –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å —Ç–æ—á–Ω—ã–º–∏, —Å–æ–≤–µ—Ç—É—é –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. "
                "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –º–µ–Ω—é –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞.",
                reply_markup=MAIN_MENU_KEYBOARD
            )
            return False
    return True

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPES) -> None:
    user = update.effective_user
    data = get_user_data_from_db(user.id)
    data["first_name"] = user.first_name
    save_user_data_to_db(user.id, data)
    keyboard = MAIN_MENU_KEYBOARD if data.get("profile_data", {}).get('goal') else START_KEYBOARD
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—å–µ—Ä–∂ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, <b>HealCo Bot</b>.\n"
        "–ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –∏ —Ä–∞–∑—É–º, –ø–∏—Ç–∞—Ç—å—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ, "
        "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –∂–∏–∑–Ω–∏.\n\n"
        "–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è? üëá\n\n"
        "<i>I heal you! ‚ô•Ô∏è</i>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def choose_specialist(update: Update, context: ContextTypes.DEFAULT_TYPES) -> None:
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è:", reply_markup=ROLE_KEYBOARD)

async def show_diaries_menu(update: Update, context: ContextTypes.DEFAULT_TYPES) -> None:
    await update.message.reply_text("–ö–∞–∫–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å?", reply_markup=DIARIES_KEYBOARD)

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPES) -> None:
    await update.message.reply_text("üèÜ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤...")
    all_users_data = get_all_users_data()
    valid_users = [
        (data.get('first_name', '–ê–Ω–æ–Ω–∏–º'), data.get('score', 0))
        for uid, data in all_users_data.items()
        if data.get('score', 0) > 0 and data.get('first_name')
    ]
    sorted_users = sorted(valid_users, key=lambda x: x[1], reverse=True)
    
    if not sorted_users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –±–∞–ª–ª–æ–≤. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return
        
    response_text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for i, (name, score) in enumerate(sorted_users[:10], 1):
        medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
        response_text += f"{medals.get(i, f'<b>{i}.</b>')} {name} - {score} –±–∞–ª–ª–æ–≤\n"
        
    await update.message.reply_text(response_text, parse_mode='HTML')

# --- –õ–æ–≥–∏–∫–∞ –†–æ–ª–µ–π-–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ ---
async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPES) -> None:
    user_id = update.effective_user.id
    requested_role_display = update.message.text
    requested_role = next((key for key, val in ROLES.items() if key.capitalize() == requested_role_display), None)

    if not requested_role:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–∞–∫—É—é —Ä–æ–ª—å.", reply_markup=MAIN_MENU_KEYBOARD)
        return

    data = get_user_data_from_db(user_id)
    data["current_role"] = requested_role
    save_user_data_to_db(user_id, data)

    if requested_role == "–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": role_keyboard = NUTRITIONIST_KEYBOARD
    elif requested_role == "—Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä": role_keyboard = FITNESS_TRAINER_KEYBOARD
    elif requested_role == "–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç": role_keyboard = PSYCHOTHERAPIST_KEYBOARD
    elif requested_role == "—Ç—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ": role_keyboard = FUTURE_SELF_KEYBOARD
    else: role_keyboard = GENERAL_SPECIALIST_KEYBOARD
    
    await update.message.reply_text("–ú–∏–Ω—É—Ç–∫—É, —Å–æ–µ–¥–∏–Ω—è—é —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º...", reply_markup=ReplyKeyboardRemove())

    try:
        prompt = (
            f"–¢–≤–æ—è –Ω–æ–≤–∞—è —Ä–æ–ª—å: {ROLES[requested_role]}. "
            "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∏ —Ä–∞—Å—Å–∫–∞–∂–∏, —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏)."
        )
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200, temperature=0.8
        )
        greeting = response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ–ª–∏: {e}")
        greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à {requested_role_display}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

    await update.message.reply_text(greeting, reply_markup=role_keyboard)

# --- –ü—Ä–æ—Ñ–∏–ª—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def start_profile_dialog(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    context.user_data['profile_data'] = {}
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        "–ù–∞–ø–∏—à–∏ /cancel, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å.",
        reply_markup=ReplyKeyboardRemove()
    )
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
    return GENDER

async def process_gender(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    text = update.message.text
    if text.lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=GENDER_KEYBOARD)
        return GENDER
    context.user_data['profile_data']['gender'] = text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    return AGE

async def process_age(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    try:
        age = int(update.message.text)
        if not (0 < age < 120): raise ValueError
        context.user_data['profile_data']['age'] = age
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö? (–ù–∞–ø—Ä–∏–º–µ—Ä: 175)")
        return HEIGHT
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 119).")
        return AGE

async def process_height(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    try:
        height = int(update.message.text)
        if not (50 < height < 250): raise ValueError
        context.user_data['profile_data']['height'] = height
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö? (–ù–∞–ø—Ä–∏–º–µ—Ä: 70.5)")
        return WEIGHT
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º (—á–∏—Å–ª–æ –æ—Ç 51 –¥–æ 249).")
        return HEIGHT

async def process_weight(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    try:
        weight = float(update.message.text.replace(',', '.'))
        if not (20 < weight < 300): raise ValueError
        context.user_data['profile_data']['weight'] = weight
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?", reply_markup=ACTIVITY_KEYBOARD)
        return ACTIVITY
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥ (—á–∏—Å–ª–æ –æ—Ç 21 –¥–æ 299).")
        return WEIGHT

async def process_activity(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    text = update.message.text
    if text.lower() not in ["—Å–∏–¥—è—á–∏–π", "—É–º–µ—Ä–µ–Ω–Ω—ã–π", "–∞–∫—Ç–∏–≤–Ω—ã–π"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=ACTIVITY_KEYBOARD)
        return ACTIVITY
    context.user_data['profile_data']['activity'] = text
    await update.message.reply_text("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?", reply_markup=GOAL_KEYBOARD)
    return GOAL

async def process_goal(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    text = update.message.text
    if text.lower() not in ["–ø–æ—Ö—É–¥–µ—Ç—å", "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=GOAL_KEYBOARD)
        return GOAL
    context.user_data['profile_data']['goal'] = text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ '–ù–µ—Ç'.", reply_markup=ReplyKeyboardRemove())
    return DISEASES

async def process_diseases(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    context.user_data['profile_data']['diseases'] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–∏—â–µ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ '–ù–µ—Ç'.")
    return ALLERGIES

async def process_allergies(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    context.user_data['profile_data']['allergies'] = update.message.text
    await finalize_profile(update, context)
    return ConversationHandler.END

async def finalize_profile(update: Update, context: ContextTypes.DEFAULT_TYPES):
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    is_new_profile = not data.get("profile_data", {}).get('goal')
    
    data["profile_data"] = context.user_data['profile_data']
    data["profile_data"]["last_updated"] = datetime.date.today().strftime('%Y-%m-%d')
    
    if is_new_profile:
        data["score"] = data.get("score", 0) + 30
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω. –ó–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 30 –±–∞–ª–ª–æ–≤! –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {data['score']}.\n"
            "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
            reply_markup=MAIN_MENU_KEYBOARD
        )
    else:
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=FITNESS_TRAINER_KEYBOARD
        )
        
    save_user_data_to_db(user_id, data)
    context.user_data.clear()

async def cancel_dialog(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU_KEYBOARD)
    return ConversationHandler.END


# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ ---
async def calculate_kbzhu(update: Update, context: ContextTypes.DEFAULT_TYPES):
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    profile = data.get("profile_data")

    if not profile or not all(k in profile for k in ['gender', 'age', 'height', 'weight', 'activity', 'goal']):
        await update.message.reply_text("–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ –º–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –µ–≥–æ.", reply_markup=START_KEYBOARD)
        return

    try:
        weight = float(profile['weight'])
        height = float(profile['height'])
        age = int(profile['age'])
        
        if profile['gender'].lower() == '–º—É–∂—Å–∫–æ–π':
            brm = (10 * weight) + (6.25 * height) - (5 * age) + 5
        else:
            brm = (10 * weight) + (6.25 * height) - (5 * age) - 161
            
        activity_coeffs = {"—Å–∏–¥—è—á–∏–π": 1.2, "—É–º–µ—Ä–µ–Ω–Ω—ã–π": 1.55, "–∞–∫—Ç–∏–≤–Ω—ã–π": 1.8}
        amr = brm * activity_coeffs[profile['activity'].lower()]
        
        goal_coeffs = {"–ø–æ—Ö—É–¥–µ—Ç—å": 0.85, "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": 1.15, "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å": 1.0}
        final_calories = amr * goal_coeffs[profile['goal'].lower()]
        
        proteins = (final_calories * 0.3) / 4
        fats = (final_calories * 0.3) / 9
        carbs = (final_calories * 0.4) / 4
        
        response_text = (
            "üìä –¢–≤–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞ –Ω–∞ –¥–µ–Ω—å:\n\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {final_calories:.0f} –∫–∫–∞–ª\n"
            f"ü•© –ë–µ–ª–∫–∏: {proteins:.0f} –≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {fats:.0f} –≥\n"
            f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.0f} –≥\n\n"
            "–ü–æ–º–Ω–∏, —ç—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ü—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Å—è –∫ —Å–≤–æ–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É!"
        )
        await update.message.reply_text(response_text, reply_markup=NUTRITIONIST_KEYBOARD)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.", reply_markup=NUTRITIONIST_KEYBOARD)

async def nutritionist_consultation_info(update: Update, context: ContextTypes.DEFAULT_TYPES):
    await update.message.reply_text(
        "–Ø ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –º–æ–≥—É –¥–∞—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —è –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ "
        "—Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤—Ä–∞—á—É-–¥–∏–µ—Ç–æ–ª–æ–≥—É –∏–ª–∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –Ω–∞ —Ç–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, –∫–∞–∫ –ü—Ä–æ—Ñ–∏.—Ä—É, DocDoc –∏–ª–∏ –≤ "
        "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫–∞—Ö –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.",
        reply_markup=NUTRITIONIST_KEYBOARD
    )

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞ ---
async def ask_workout_location(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    await update.message.reply_text("–ì–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?", reply_markup=ReplyKeyboardMarkup(WORKOUT_PLACE_KEYBOARD, one_time_keyboard=True, resize_keyboard=True))
    return LOCATION

async def ask_equipment(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    context.user_data['workout_location'] = update.message.text
    await update.message.reply_text("–£ —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–∞–Ω—Ç–µ–ª–∏, —Ä–µ–∑–∏–Ω–∫–∏, —Ç—É—Ä–Ω–∏–∫)? –ï—Å–ª–∏ –¥–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏ –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ '–ù–µ—Ç'.", reply_markup=ReplyKeyboardRemove())
    return EQUIPMENT

async def generate_workout_plan(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    equipment = update.message.text
    location = context.user_data['workout_location']
    
    await update.message.reply_text("üí™ –û—Ç–ª–∏—á–Ω–æ! –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª—è —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫... –≠—Ç–æ –∑–∞–π–º–µ—Ç —Å–µ–∫—É–Ω–¥—É.", reply_markup=ReplyKeyboardRemove())
    
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    role_prompt = ROLES["—Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä"]
    workout_prompt = (
        f"–¢–≤–æ—è —Ä–æ–ª—å: {role_prompt}. "
        f"–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é (3 –¥–Ω—è), –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        f"–ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: '{location}'.\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: '{equipment}'.\n"
        f"{get_personal_prompt(data.get('profile_data', {}), data.get('first_name'))}\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –¥–Ω—è:\n"
        "- üóìÔ∏è –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "- üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ø–æ–¥—Ö–æ–¥—ã/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è)\n"
        "- üî• –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∂–∏–≥–∞–µ–º—ã—Ö –∫–∞–ª–æ—Ä–∏–π\n"
        "- ‚ù§Ô∏è –¶–µ–ª–µ–≤—ã–µ –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã (–≤ —É–¥–∞—Ä–∞—Ö –≤ –º–∏–Ω—É—Ç—É)\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏ –∞–∫—Ü–µ–Ω—Ç–æ–≤. –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—É–ø–µ—Ä-–º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. "
        "–í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏)."
    )
    
    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": workout_prompt}],
            max_tokens=1500, temperature=0.7
        )
        await update.message.reply_text(response.choices[0].message.content, reply_markup=FITNESS_TRAINER_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å AI.", reply_markup=FITNESS_TRAINER_KEYBOARD)
        
    context.user_data.clear()
    return ConversationHandler.END
    
async def calculate_bmi(update: Update, context: ContextTypes.DEFAULT_TYPES):
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    profile = data.get("profile_data")

    if not profile or not all(k in profile for k in ['height', 'weight', 'age', 'gender']):
        await update.message.reply_text("–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ò–ú–¢ –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π —Ä–æ—Å—Ç –∏ –≤–µ—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –µ–≥–æ.", reply_markup=START_KEYBOARD)
        return
        
    await update.message.reply_text("üìà –°—á–∏—Ç–∞—é —Ç–≤–æ–π –ò–ú–¢ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...", reply_markup=ReplyKeyboardRemove())

    try:
        height_m = float(profile['height']) / 100
        weight_kg = float(profile['weight'])
        bmi = weight_kg / (height_m ** 2)
        
        prompt = (
            "–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. "
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ò–ú–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï–≥–æ –ò–ú–¢ = {bmi:.2f}. "
            f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–ª {profile['gender']}, –≤–æ–∑—Ä–∞—Å—Ç {profile['age']}. "
            "–°—Ä–∞–≤–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç—ã–º–∏ –Ω–æ—Ä–º–∞–º–∏ (–¥–µ—Ñ–∏—Ü–∏—Ç, –Ω–æ—Ä–º–∞, –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å, –æ–∂–∏—Ä–µ–Ω–∏–µ). "
            "–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. "
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –ò–ú–¢ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É. "
            "–í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏)."
        )
        
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=400, temperature=0.7
        )
        
        result_text = f"–¢–≤–æ–π –ò–Ω–¥–µ–∫—Å –ú–∞—Å—Å—ã –¢–µ–ª–∞ (–ò–ú–¢): <b>{bmi:.2f}</b>\n\n{response.choices[0].message.content}"
        await update.message.reply_text(result_text, reply_markup=FITNESS_TRAINER_KEYBOARD, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ò–ú–¢: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ò–ú–¢.", reply_markup=FITNESS_TRAINER_KEYBOARD)

async def explain_vo2max(update: Update, context: ContextTypes.DEFAULT_TYPES):
    explanation = (
        "<b>VO2 max</b> ‚Äî —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏—Å–ª–æ—Ä–æ–¥–∞ (–≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö), –∫–æ—Ç–æ—Ä–æ–µ —á–µ–ª–æ–≤–µ–∫ —Å–ø–æ—Å–æ–±–µ–Ω "
        "–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º –≤–µ—Å–∞ —Ç–µ–ª–∞ –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.\n\n"
        "–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —ç—Ç–æ <b>–∫–ª—é—á–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞—ç—Ä–æ–±–Ω–æ–π –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏</b>. –ß–µ–º –≤—ã—à–µ —Ç–≤–æ–π VO2 max, —Ç–µ–º "
        "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Ç–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∏—Å–ª–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–∏–∏, –∏ —Ç–µ–º –¥–æ–ª—å—à–µ —Ç—ã –º–æ–∂–µ—à—å "
        "–≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–µ–≥–µ, –ø–ª–∞–≤–∞–Ω–∏–∏, –≤–µ–ª–æ—Å–ø–æ—Ä—Ç–µ).\n\n"
        "–ò–∑–º–µ—Ä–∏—Ç—å –µ–≥–æ —Ç–æ—á–Ω–æ –º–æ–∂–Ω–æ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, –Ω–æ –º–Ω–æ–≥–∏–µ —Ñ–∏—Ç–Ω–µ—Å-—á–∞—Å—ã –¥–∞—é—Ç —Ö–æ—Ä–æ—à—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ "
        "–¥–∞–Ω–Ω—ã—Ö –æ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –ø—É–ª—å—Å–µ."
    )
    await update.message.reply_text(explanation, reply_markup=FITNESS_TRAINER_KEYBOARD, parse_mode='HTML')

async def trainer_consultation_info(update: Update, context: ContextTypes.DEFAULT_TYPES):
    await update.message.reply_text(
        "–Ø ‚Äî AI-—Ç—Ä–µ–Ω–µ—Ä –∏ –º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–æ—Ä–æ—à–∏–π –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω.\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–≤–º–∞–º–∏, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º –∏–ª–∏ –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏, "
        "—è –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞–π—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –æ—á–Ω—ã—Ö –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏–π.\n\n"
        "–õ–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ ‚Äî –∫–ª—é—á –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏ –±—ã—Å—Ç—Ä–æ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É.",
        reply_markup=FITNESS_TRAINER_KEYBOARD
    )

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞ ---
async def start_mood_logging(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?", reply_markup=MOOD_SCALE_KEYBOARD)
    return MOOD_SELECT

async def ask_mood_time(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    context.user_data['mood_text'] = update.message.text
    await update.message.reply_text("–ö –∫–∞–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", reply_markup=MOOD_TIME_KEYBOARD)
    return TIME_SELECT

async def finalize_mood_log(update: Update, context: ContextTypes.DEFAULT_TYPES) -> int:
    mood_text_full = context.user_data['mood_text']
    mood_time = update.message.text
    mood_text = mood_text_full.split(" ")[0]
    mood_map = {"–û—Ç–ª–∏—á–Ω–æ–µ": 5, "–•–æ—Ä–æ—à–µ–µ": 4, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 3, "–ü–ª–æ—Ö–æ–µ": 2, "–û—á–µ–Ω—å": 1}
    mood_level = mood_map.get(mood_text, 3)

    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    entry = {
        "date": datetime.date.today().strftime('%d.%m.%Y'),
        "time_of_day": mood_time,
        "mood_level": mood_level,
        "mood_text": mood_text_full
    }
    data.setdefault("mood_diary", []).append(entry)
    data["score"] = data.get("score", 0) + 5
    save_user_data_to_db(user_id, data)

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è. –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 5 –±–∞–ª–ª–æ–≤! ‚ú®\n"
        f"–¢–≤–æ–π —Å—á–µ—Ç: {data['score']}",
        reply_markup=MOOD_DIARY_MENU_KEYBOARD
    )
    
    try:
        if mood_level <= 2:
            prompt = (f"–¢–≤–æ—è —Ä–æ–ª—å: {ROLES['–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç']}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —É –Ω–µ–≥–æ '{mood_text_full}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. "
                      "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –Ω–æ –æ—á–µ–Ω—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. "
                      "–ú—è–≥–∫–æ –ø—Ä–∏–∑–Ω–∞–π, —á—Ç–æ —Ç–∞–∫–∏–µ –¥–Ω–∏ –±—ã–≤–∞—é—Ç –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. "
                      "–ù–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ–∫–∞–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É. "
                      "–í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏).")
        else:
            prompt = (f"–¢–≤–æ—è —Ä–æ–ª—å: {ROLES['–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç']}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —É –Ω–µ–≥–æ '{mood_text_full}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. "
                      "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∏ –æ–±–æ–¥—Ä—è—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. "
                      "–í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown (–∑–≤–µ–∑–¥–æ—á–∫–∏, —Ä–µ—à–µ—Ç–∫–∏).")
        
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150, temperature=0.9
        )
        await update.message.reply_text(f"üí¨ {response.choices[0].message.content}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {e}")

    context.user_data.clear()
    return ConversationHandler.END

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª "–¢—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ" ---
async def start_future_self_image_generation(update: Update, context: ContextTypes.DEFAULT_TYPES):
    await update.message.reply_text(
        "üîÆ –Ø –≤–∏–∂—É —Ç–≤–æ–µ –±—É–¥—É—â–µ–µ... –æ–Ω–æ —è—Ä–∫–æ–µ –∏ —Å–∏–ª—å–Ω–æ–µ. "
        "–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ —Ç–µ–±–µ, –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –Ω–µ–¥–∞–≤–Ω—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –≥–¥–µ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ. "
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    data['context_state'] = 'awaiting_future_self_photo'
    save_user_data_to_db(user_id, data)

async def handle_future_self_photo(update: Update, context: ContextTypes.DEFAULT_TYPES):
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    
    if data.get('context_state') != 'awaiting_future_self_photo':
        await handle_message(update, context)
        return
        
    data.pop('context_state', None)
    save_user_data_to_db(user_id, data)

    await update.message.reply_text("‚ú® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –æ–±—Ä–∞–∑ –∏ –∑–∞–≥–ª—è–¥—ã–≤–∞—é –≤ –±—É–¥—É—â–µ–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.", reply_markup=FUTURE_SELF_KEYBOARD)

    try:
        file_obj = await context.bot.get_file(update.message.photo[-1].file_id)
        photo_bytes = await file_obj.download_as_bytes()
        base64_image = encode_image(photo_bytes)

        vision_prompt = "–û–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ (—Ñ–æ—Ä–º–∞ –ª–∏—Ü–∞, —Ü–≤–µ—Ç –≥–ª–∞–∑, —Ü–≤–µ—Ç –≤–æ–ª–æ—Å, –ø—Ä–∏—á–µ—Å–∫–∞, –Ω–∞–ª–∏—á–∏–µ –±–æ—Ä–æ–¥—ã/—É—Å–æ–≤, –æ—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã) –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ DALL-E 3. –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º."
        vision_response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "content": vision_prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                ]
            }],
            max_tokens=200
        )
        face_description = vision_response.choices[0].message.content

        await update.message.reply_text("üß¨ –°–æ–∑–¥–∞—é —Ç–≤–æ—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é...")

        user_goal = data.get("profile_data", {}).get("goal", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")
        if "–ø–æ—Ö—É–¥–µ—Ç—å" in user_goal:
            body_type = "a lean, athletic physique with well-defined muscles"
        elif "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É" in user_goal:
            body_type = "a powerful, muscular build, like a bodybuilder"
        else:
            body_type = "a fit and toned body, healthy and strong"
            
        dalle_prompt = (
            f"Photorealistic image of a person with the following facial features: {face_description}. "
            f"The person has {body_type}, looking confident and happy after a workout. "
            "They are in a modern, bright gym. Cinematic lighting, high detail."
        )

        image_response = await client.images.generate(
            model="dall-e-3",
            prompt=dalle_prompt,
            n=1, size="1024x1024", quality="standard", response_format="b64_json"
        )
        
        generated_image_b64 = image_response.data[0].b64_json
        generated_image_bytes = base64.b64decode(generated_image_b64)
        
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=BytesIO(generated_image_bytes),
            caption="–í–æ—Ç —Ç–∞–∫–∏–º —è —Ç–µ–±—è –≤–∏–∂—É –≤ –±—É–¥—É—â–µ–º. –¢—ã –º–æ–∂–µ—à—å —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∏—á—å. üí™",
            reply_markup=FUTURE_SELF_KEYBOARD
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–∞ –±—É–¥—É—â–µ–≥–æ: {e}")
        await update.message.reply_text("üîÆ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –ª–∏–Ω–∏—è –±—É–¥—É—â–µ–≥–æ –æ–∫–∞–∑–∞–ª–∞—Å—å —Ä–∞–∑–º—ã—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.", reply_markup=FUTURE_SELF_KEYBOARD)


# --- –î–Ω–µ–≤–Ω–∏–∫–∏ –∏ –ø—Ä–æ—á–µ–µ ---
async def start_workout_logging(update: Update, context: ContextTypes.DEFAULT_TYPES):
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ö–∞–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–∏–ª?", reply_markup=WORKOUT_TYPE_KEYBOARD)

async def log_workout(update: Update, context: ContextTypes.DEFAULT_TYPES):
    workout_type = update.message.text.split(" ")[0]
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    
    today_str = datetime.date.today().strftime('%d.%m.%Y')
    
    if data.get("workout_diary") and data["workout_diary"][-1].startswith(today_str):
         await update.message.reply_text("–¢—ã —É–∂–µ –æ—Ç—á–∏—Ç–∞–ª—Å—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–µ–≥–æ–¥–Ω—è. –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üí™", reply_markup=DIARIES_KEYBOARD)
         return
         
    data["score"] = data.get("score", 0) + 15
    entry = f"{today_str} - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({workout_type}) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üí™ +15 –æ—á–∫–æ–≤."
    data.setdefault("workout_diary", []).append(entry)
    save_user_data_to_db(user_id, data)
    
    await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üèÜ –¢–≤–æ–π —É—Å–ø–µ—Ö –∑–∞–ø–∏—Å–∞–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫, –∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 15 –±–∞–ª–ª–æ–≤. –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {data['score']}.", reply_markup=DIARIES_KEYBOARD)
    await check_profile_update(update, context)

# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPES) -> None:
    if not update.message or not update.message.text: return
    
    message_text = update.message.text

    button_map = {
        "–≤—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üé≠": choose_specialist,
        "–º–æ–∏ –¥–Ω–µ–≤–Ω–∏–∫–∏ üìî": show_diaries_menu,
        "–º–æ–∏ –±–∞–ª–ª—ã üèÜ": leaderboard,
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": start,
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞": choose_specialist,
        "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–±–∂—É üìä": calculate_kbzhu,
        "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É ‚ùì": nutritionist_consultation_info,
        "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–º—Ç üìâ": calculate_bmi,
        "—á—Ç–æ —Ç–∞–∫–æ–µ vo2max ‚ùì": explain_vo2max,
        "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É ‚ùì": trainer_consultation_info,
        "–¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üèãÔ∏è": start_workout_logging,
        "—Å–æ–∑–¥–∞—Ç—å –º–æ–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –±—É–¥—É—â–µ–µ üîÆ": start_future_self_image_generation,
    }

    if message_text.capitalize() in ROLE_BUTTON_LABELS:
        await handle_role_selection(update, context)
        return

    handler_func = None
    for key, func in button_map.items():
        cleaned_key = re.sub(r'[^\w\s]', '', key).strip().lower()
        cleaned_message = re.sub(r'[^\w\s]', '', message_text).strip().lower()
        if cleaned_message == cleaned_key:
            handler_func = func
            break
            
    if handler_func:
        await handler_func(update, context)
        return

    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=MAIN_MENU_KEYBOARD)


def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    profile_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^(–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å|–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è üîÑ)$'), start_profile_dialog)],
        states={
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_gender)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_age)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_weight)],
            ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_activity)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_goal)],
            DISEASES: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_diseases)],
            ALLERGIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_allergies)],
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog)],
    )

    workout_plan_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^(–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™)$'), ask_workout_location)],
        states={
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_equipment)],
            EQUIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, generate_workout_plan)],
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog)],
    )

    mood_log_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^(–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üß†|–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚ú®)$'), start_mood_logging)],
        states={
            MOOD_SELECT: [MessageHandler(filters.Regex(r'^(–û—Ç–ª–∏—á–Ω–æ–µ üëç|–•–æ—Ä–æ—à–µ–µ üôÇ|–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ üòê|–ü–ª–æ—Ö–æ–µ üòï|–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ üòî)$'), ask_mood_time)],
            TIME_SELECT: [MessageHandler(filters.Regex(r'^(–£—Ç—Ä–æ ‚òÄÔ∏è|–î–µ–Ω—å üèôÔ∏è|–í–µ—á–µ—Ä üåô)$'), finalize_mood_log)],
        },
        fallbacks=[CommandHandler('cancel', cancel_dialog)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    
    application.add_handler(profile_handler)
    application.add_handler(workout_plan_handler)
    application.add_handler(mood_log_handler)

    application.add_handler(MessageHandler(filters.Regex(r'^(–ë–µ–≥ üèÉ|–°–∏–ª–æ–≤–∞—è üí™|–í–ò–ò–¢ üî•|–î–æ–º–∞—à–Ω—è—è üè†)$'), log_workout))
    
    application.add_handler(MessageHandler(filters.PHOTO, handle_future_self_photo))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling()

if __name__ == "__main__":
    main()

