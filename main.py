import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import base64
import json
import re
from replit import db
import datetime

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ö–ª—é—á–∏ TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Secrets!")

client = openai.OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –†–æ–ª–µ–≤—ã–µ –º–æ–¥–µ–ª–∏ ---
ROLES = {
    "–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏ –∏ –±–∏–æ—Ö–∏–º–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Ü–∏–æ–Ω—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã –∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –Ω–∞—É–∫–µ.",
    "—Ñ–∏—Ç–Ω–µ—Å—Å-—Ç—Ä–µ–Ω–µ—Ä": "–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–Ω—ã, –Ω–∞—É—á–Ω—ã –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—Ç –∫–∞–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.",
    "–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç": "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –º—É–¥—Ä—ã–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–µ—Ö–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Å—É–∂–¥–∞–µ—à—å. –¢–≤–æ—è —Ä–µ—á—å —Å–ø–æ–∫–æ–π–Ω–∞—è –∏ –≤—Å–µ–ª—è—é—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.",
    "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": "–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ª–µ–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å –æ–≥–æ–≤–æ—Ä–∫–æ–π, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–∞—á–∞.",
    "–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –∫–æ—É—á –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–Ω—è, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ.",
    "—Ç—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ": "–¢—ã ‚Äî —ç—Ç–æ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ. –¢—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ –≤—Å–µ—Ö —Ü–µ–ª–µ–π, –æ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—á—Ç–∞–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –º—É–¥—Ä—ã–µ, –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–≤–µ—Ç—ã, –Ω–∞–º–µ–∫–∞—è –Ω–∞ –±—É–¥—É—â–∏–µ —É—Å–ø–µ—Ö–∏.",
}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
START_KEYBOARD = ReplyKeyboardMarkup([["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]], resize_keyboard=True)
MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup([["–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üé≠"], ["–ú–æ–∏ –¥–Ω–µ–≤–Ω–∏–∫–∏ üìî", "–ú–æ–∏ –±–∞–ª–ª—ã üèÜ"]], resize_keyboard=True)
ROLE_BUTTON_LABELS = [role.capitalize() for role in ROLES.keys()]
ROLE_BUTTONS = [[label] for label in ROLE_BUTTON_LABELS]
ROLE_KEYBOARD = ReplyKeyboardMarkup(ROLE_BUTTONS, one_time_keyboard=True, resize_keyboard=True)
NUTRITIONIST_KEYBOARD = ReplyKeyboardMarkup([["–°–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å üçΩÔ∏è"], ["–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîç"], ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É ‚ùì"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)
FITNESS_TRAINER_KEYBOARD = ReplyKeyboardMarkup([["–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™"], ["–í–æ–ø—Ä–æ—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é üèãÔ∏è"], ["–°–æ–≤–µ—Ç –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é üßò"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)
PSYCHOTHERAPIST_KEYBOARD = ReplyKeyboardMarkup([["–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üß†"], ["–¢–µ—Ö–Ω–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —É—Å–ø–æ–∫–æ–µ–Ω–∏—è üå¨Ô∏è"], ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É ‚ùì"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)
GENERAL_SPECIALIST_KEYBOARD = ReplyKeyboardMarkup([["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚ùì"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"]], resize_keyboard=True)
DIARIES_KEYBOARD = ReplyKeyboardMarkup([["–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è ü•ï", "–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üèãÔ∏è"], ["–î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è ‚ù§Ô∏è‚Äçü©π", "–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üìä"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
MOOD_KEYBOARD = ReplyKeyboardMarkup([["–û—Ç–ª–∏—á–Ω–æ–µ üëç", "–•–æ—Ä–æ—à–µ–µ üôÇ"], ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ üòê"], ["–ü–ª–æ—Ö–æ–µ üòï", "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ üòî"], ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üìä", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É"]], resize_keyboard=True)
HEALTH_KEYBOARD_BASE = [["–ó–∞–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º ü§ß", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ üìñ"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
PROFILE_QUESTIONS = ["profile_state_gender", "profile_state_age", "profile_state_height", "profile_state_weight", "profile_state_activity", "profile_state_goal", "profile_state_diseases", "profile_state_allergies"]
GENDER_KEYBOARD = [["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]]
ACTIVITY_KEYBOARD = [["–°–∏–¥—è—á–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–ê–∫—Ç–∏–≤–Ω—ã–π"]]
GOAL_KEYBOARD = [["–ü–æ—Ö—É–¥–µ—Ç—å", "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"]]
WORKOUT_PLACE_KEYBOARD = [["–î–æ–º–∞", "–í –∑–∞–ª–µ", "–ù–∞ —É–ª–∏—Ü–µ"]]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def get_user_data_from_db(user_id):
    key = str(user_id)
    if key in db:
        data = json.loads(db[key])
        data.setdefault("workout_diary", [])
        data.setdefault("health_diary", [])
        data.setdefault("mood_diary", [])
        return data
    else:
        default_data = {"current_role": "–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫", "profile_data": {}, "score": 0, "food_diary": [], "workout_diary": [], "health_diary": [], "mood_diary": [], "first_name": "", "last_name": ""}
        db[key] = json.dumps(default_data)
        return default_data

def save_user_data_to_db(user_id, data):
    key = str(user_id)
    db[key] = json.dumps(data)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def encode_image(image_bytes):
    return base64.b64encode(image_bytes).decode('utf-8')

def get_personal_prompt(user_profile_data: dict, first_name: str = None) -> str:
    if not user_profile_data or not user_profile_data.get('goal'): return ""
    parts = []
    if first_name: parts.append(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name}")
    if 'gender' in user_profile_data: parts.append(f"–ø–æ–ª: {user_profile_data['gender'].lower()}")
    if 'age' in user_profile_data: parts.append(f"–≤–æ–∑—Ä–∞—Å—Ç: {user_profile_data['age']} –ª–µ—Ç")
    if 'height' in user_profile_data: parts.append(f"—Ä–æ—Å—Ç: {user_profile_data['height']} —Å–º")
    if 'weight' in user_profile_data: parts.append(f"–≤–µ—Å: {user_profile_data['weight']} –∫–≥")
    if 'activity' in user_profile_data: parts.append(f"–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {user_profile_data['activity'].lower()}")
    if 'goal' in user_profile_data: parts.append(f"—Ü–µ–ª—å: {user_profile_data['goal'].lower()}")
    if 'diseases' in user_profile_data and user_profile_data['diseases'].lower() not in ['–Ω–µ—Ç', 'no']: parts.append(f"—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {user_profile_data['diseases']}")
    if 'allergies' in user_profile_data and user_profile_data['allergies'].lower() not in ['–Ω–µ—Ç', 'no']: parts.append(f"–∞–ª–ª–µ—Ä–≥–∏–∏: {user_profile_data['allergies']}")
    return f"–£—á–∏—Ç—ã–≤–∞–π –≤ –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ —Å–µ–±–µ: {', '.join(parts)}. " if parts else ""

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    data = get_user_data_from_db(user.id)
    data["first_name"] = user.first_name
    save_user_data_to_db(user.id, data)
    keyboard = MAIN_MENU_KEYBOARD if data.get("profile_data", {}).get('goal') else START_KEYBOARD
    await update.message.reply_html(f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—å–µ—Ä–∂ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –∏ —Ä–∞–∑—É–º, –ø–∏—Ç–∞—Ç—å—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –∂–∏–∑–Ω–∏.\n\n–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è? üëá\n\n<i>I heal you! ‚ô•Ô∏è</i>", reply_markup=keyboard)

async def choose_specialist(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è:", reply_markup=ROLE_KEYBOARD)

async def show_diaries_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ö–∞–∫–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=DIARIES_KEYBOARD)

# --- –†–æ–ª–∏-–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ---
async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    requested_role_display = update.message.text
    requested_role = requested_role_display.lower().replace('-', ' ')
    data = get_user_data_from_db(user_id)
    if requested_role in ROLES:
        data["current_role"] = requested_role
        save_user_data_to_db(user_id, data)
        if requested_role == "–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": role_keyboard = NUTRITIONIST_KEYBOARD
        elif requested_role == "—Ñ–∏—Ç–Ω–µ—Å—Å-—Ç—Ä–µ–Ω–µ—Ä": role_keyboard = FITNESS_TRAINER_KEYBOARD
        elif requested_role == "–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç": role_keyboard = PSYCHOTHERAPIST_KEYBOARD
        else: role_keyboard = GENERAL_SPECIALIST_KEYBOARD
        try:
            prompt = f"–¢–≤–æ—è –Ω–æ–≤–∞—è —Ä–æ–ª—å: {ROLES[requested_role]}. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∏ —Ä–∞—Å—Å–∫–∞–∂–∏, —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'). –¢–≤–æ–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–≤–æ–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
            response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}], max_tokens=200, temperature=0.8)
            greeting = response.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ–ª–∏: {e}")
            greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à **{requested_role_display}**. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        await update.message.reply_text(greeting, reply_markup=role_keyboard, parse_mode='Markdown')
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–∞–∫—É—é —Ä–æ–ª—å.", reply_markup=MAIN_MENU_KEYBOARD)

# --- –ü—Ä–æ—Ñ–∏–ª—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def start_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    data["context_state"] = 'awaiting_profile'
    save_user_data_to_db(user_id, data)
    context.user_data['profile_questions_index'] = 0
    context.user_data['profile_data'] = {}
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n–ù–∞–ø–∏—à–∏ `–û—Ç–º–µ–Ω–∞`, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å.", reply_markup=ReplyKeyboardRemove())
    await ask_next_profile_question(update, context)

async def ask_next_profile_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    question_index = context.user_data.get('profile_questions_index', 0)
    if question_index >= len(PROFILE_QUESTIONS):
        await finalize_profile(update, context)
        return
    current_question_key = PROFILE_QUESTIONS[question_index]
    question_text = ""
    reply_markup = ReplyKeyboardRemove()
    if current_question_key == "profile_state_gender":
        question_text = "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:"; reply_markup = ReplyKeyboardMarkup(GENDER_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    elif current_question_key == "profile_state_age": question_text = "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?"
    elif current_question_key == "profile_state_height": question_text = "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö? (–ù–∞–ø—Ä–∏–º–µ—Ä: 175)"
    elif current_question_key == "profile_state_weight": question_text = "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö? (–ù–∞–ø—Ä–∏–º–µ—Ä: 70.5)"
    elif current_question_key == "profile_state_activity":
        question_text = "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?"; reply_markup = ReplyKeyboardMarkup(ACTIVITY_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    elif current_question_key == "profile_state_goal":
        question_text = "–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?"; reply_markup = ReplyKeyboardMarkup(GOAL_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    elif current_question_key == "profile_state_diseases": question_text = "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ `–ù–µ—Ç`."
    elif current_question_key == "profile_state_allergies": question_text = "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–∏—â–µ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ `–ù–µ—Ç`."
    await update.message.reply_text(question_text, reply_markup=reply_markup)

async def handle_profile_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = update.message.text
    if message_text and message_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_profile(update, context); return
    question_index = context.user_data.get('profile_questions_index', 0)
    current_question_key = PROFILE_QUESTIONS[question_index]
    profile_data = context.user_data.get('profile_data', {})
    valid = True; error_message = ""
    try:
        if current_question_key == "profile_state_gender":
            if message_text.lower() in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]: profile_data["gender"] = message_text
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'."
        elif current_question_key == "profile_state_age":
            age = int(message_text)
            if 0 < age < 120: profile_data["age"] = age
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç."
        elif current_question_key == "profile_state_height":
            height = int(message_text)
            if 50 < height < 250: profile_data["height"] = height
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç."
        elif current_question_key == "profile_state_weight":
            weight = float(message_text.replace(',', '.'))
            if 20 < weight < 300: profile_data["weight"] = weight
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å."
        elif current_question_key == "profile_state_activity":
            if message_text.lower() in ["—Å–∏–¥—è—á–∏–π", "—É–º–µ—Ä–µ–Ω–Ω—ã–π", "–∞–∫—Ç–∏–≤–Ω—ã–π"]: profile_data["activity"] = message_text
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        elif current_question_key == "profile_state_goal":
            if message_text.lower() in ["–ø–æ—Ö—É–¥–µ—Ç—å", "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"]: profile_data["goal"] = message_text
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        elif current_question_key == "profile_state_diseases": profile_data["diseases"] = message_text
        elif current_question_key == "profile_state_allergies": profile_data["allergies"] = message_text
    except (ValueError, TypeError):
        valid = False; error_message = "–ö–∞–∂–µ—Ç—Å—è, —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
    if not valid:
        await update.message.reply_text(error_message); return
    context.user_data['profile_data'] = profile_data
    context.user_data['profile_questions_index'] += 1
    await ask_next_profile_question(update, context)

async def finalize_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    data["profile_data"] = context.user_data.get('profile_data', {})
    data["score"] = data.get("score", 0) + 30
    data.pop('context_state', None)
    save_user_data_to_db(user_id, data)
    context.user_data.pop('profile_questions_index', None)
    context.user_data.pop('profile_data', None)
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω. –ó–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 30 –±–∞–ª–ª–æ–≤! –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {data['score']}.\n–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=MAIN_MENU_KEYBOARD)

async def cancel_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    context.user_data.pop('profile_questions_index', None)
    context.user_data.pop('profile_data', None)
    data = get_user_data_from_db(user_id)
    data.pop('context_state', None)
    save_user_data_to_db(user_id, data)
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=START_KEYBOARD)

# --- –§—É–Ω–∫—Ü–∏–∏ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ ---
async def create_personalized_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    await update.message.reply_text("–¢–∞–∫, –º–∏–Ω—É—Ç–æ—á–∫—É... üë®‚Äçüç≥ –°–æ—Å—Ç–∞–≤–ª—è—é –¥–ª—è —Ç–µ–±—è –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–µ–Ω—é. –û–∂–∏–¥–∞–π...", reply_markup=ReplyKeyboardRemove())
    role_prompt = ROLES["–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥"]
    menu_prompt = (f"–¢—ã ‚Äî {role_prompt}. –ò—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Å—Ç–∞–≤—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å: '–ë–∞–∑–æ–≤–æ–µ –º–µ–Ω—é' (–∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤) –∏ '–ì—É—Ä–º–µ-–º–µ–Ω—é' (—Å –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–º–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏).\n{get_personal_prompt(data.get('profile_data', {}), data.get('first_name'))}\n–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω) –≤ –æ–±–æ–∏—Ö –º–µ–Ω—é, —É–∫–∞–∂–∏:\n- üç≥/ü•ó/üç≤ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n- ‚öñÔ∏è –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ–±—ä–µ–º –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, ~300 –≥)\n- üî• –ü—Ä–∏–º–µ—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ~450 –∫–∫–∞–ª)\n–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω, –¥—Ä—É–∂–µ–ª—é–±–µ–Ω –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â.")
    try:
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": menu_prompt}], max_tokens=1500, temperature=0.8)
        await update.message.reply_text(response.choices[0].message.content, reply_markup=NUTRITIONIST_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=NUTRITIONIST_KEYBOARD)

async def create_workout_plan_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ì–¥–µ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?", reply_markup=ReplyKeyboardMarkup(WORKOUT_PLACE_KEYBOARD, one_time_keyboard=True, resize_keyboard=True))

async def create_workout_plan_final(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    workout_location = update.message.text.lower()
    await update.message.reply_text("üí™ –û—Ç–ª–∏—á–Ω–æ! –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª—è —Ç–µ–±—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫... –≠—Ç–æ –∑–∞–π–º–µ—Ç —Å–µ–∫—É–Ω–¥—É.", reply_markup=ReplyKeyboardRemove())
    role_prompt = ROLES["—Ñ–∏—Ç–Ω–µ—Å—Å-—Ç—Ä–µ–Ω–µ—Ä"]
    workout_prompt = (f"–¢—ã ‚Äî {role_prompt}. –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é (3 –¥–Ω—è), –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å '{workout_location}'.\n{get_personal_prompt(data.get('profile_data', {}), data.get('first_name'))}\n–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –¥–Ω—è:\n- üóìÔ∏è –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n- üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ø–æ–¥—Ö–æ–¥—ã/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è)\n- üî• –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∂–∏–≥–∞–µ–º—ã—Ö –∫–∞–ª–æ—Ä–∏–π\n- ‚ù§Ô∏è –¶–µ–ª–µ–≤—ã–µ –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ', '–û—Ç–¥—ã—Ö' –∏ '–ü—Ä–µ—Ä–≤–∞—Ç—å –µ—Å–ª–∏'.\n–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏ –∞–∫—Ü–µ–Ω—Ç–æ–≤. –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—É–ø–µ—Ä-–º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.")
    try:
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": workout_prompt}], max_tokens=1500, temperature=0.7)
        await update.message.reply_text(response.choices[0].message.content, reply_markup=FITNESS_TRAINER_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å AI.", reply_markup=FITNESS_TRAINER_KEYBOARD)

async def analyze_product_by_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. üèóÔ∏è", reply_markup=NUTRITIONIST_KEYBOARD)

async def handle_exercise_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. üèóÔ∏è", reply_markup=FITNESS_TRAINER_KEYBOARD)

async def handle_breathing_technique(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. üå¨Ô∏è", reply_markup=PSYCHOTHERAPIST_KEYBOARD)

# --- –î–Ω–µ–≤–Ω–∏–∫–∏ ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    await update.message.reply_text("üßê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —à–µ–¥–µ–≤—Ä...", reply_markup=ReplyKeyboardRemove())
    try:
        file_obj = await context.bot.get_file(update.message.photo[-1].file_id)
        photo_bytes = await file_obj.download_as_bytes()
        base64_image = encode_image(photo_bytes)
        vision_prompt = "–≠—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –µ–¥—ã. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. –í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏:\n1. üçΩÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞**\n2. üìù **–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã**\n3. ‚öñÔ∏è **–ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏** –≤ –≥—Ä–∞–º–º–∞—Ö\n4. üî• **–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å** (–¥–∏–∞–ø–∞–∑–æ–Ω). –ï—Å–ª–∏ –Ω–µ –µ–¥–∞, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": [{"type": "text", "content": vision_prompt}, {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}]}], max_tokens=400)
        description = response.choices[0].message.content
        data = get_user_data_from_db(user_id)
        food_title = description.split('\n')[0].replace("üçΩÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:**", "").strip()
        data["food_diary"].append(f"{datetime.datetime.now().strftime('%H:%M %d.%m')} - {food_title}")
        save_user_data_to_db(user_id, data)
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –º–æ–π –∞–Ω–∞–ª–∏–∑:\n\n{description}\n\n–Ø –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ –±–ª—é–¥–æ –≤ —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è. ‚úÖ", reply_markup=MAIN_MENU_KEYBOARD, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–û–π, –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=MAIN_MENU_KEYBOARD)

async def show_food_diary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    diary_entries = data.get("food_diary", [])
    if not diary_entries:
        await update.message.reply_text("–¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç.", reply_markup=DIARIES_KEYBOARD)
        return
    response_text = "–¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π):\n" + "\n".join([f"- {entry}" for entry in diary_entries[-15:]])
    await update.message.reply_text(response_text, reply_markup=DIARIES_KEYBOARD)
    
async def workout_done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    today_str = datetime.date.today().strftime('%d.%m.%Y')
    if data.get("workout_diary") and data["workout_diary"][-1].startswith(today_str):
         await update.message.reply_text("–¢—ã —É–∂–µ –æ—Ç—á–∏—Ç–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", reply_markup=MAIN_MENU_KEYBOARD)
         return
    data["score"] = data.get("score", 0) + 15
    entry = f"{today_str} - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üí™ +15 –æ—á–∫–æ–≤."
    data["workout_diary"].append(entry)
    save_user_data_to_db(user_id, data)
    await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üèÜ –¢–≤–æ–π —É—Å–ø–µ—Ö –∑–∞–ø–∏—Å–∞–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫, –∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 15 –±–∞–ª–ª–æ–≤. –°—á–µ—Ç: {data['score']}.", reply_markup=MAIN_MENU_KEYBOARD)

async def show_workout_diary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    diary_entries = data.get("workout_diary", [])
    if not diary_entries:
        await update.message.reply_text("–¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç. –°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å! üòâ", reply_markup=DIARIES_KEYBOARD)
        return
    response_text = "–¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π):\n\n"
    for entry in diary_entries[-15:]:
        response_text += f"‚úÖ {entry}\n"
    await update.message.reply_text(response_text, reply_markup=DIARIES_KEYBOARD)

async def health_diary_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    profile_diseases = get_user_data_from_db(update.effective_user.id).get("profile_data", {}).get("diseases", "").lower()
    keyboard_layout = [row[:] for row in HEALTH_KEYBOARD_BASE]
    if "–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è" in profile_diseases or "–¥–∞–≤–ª–µ–Ω–∏–µ" in profile_diseases: keyboard_layout.insert(1, ["–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ ü©∫"])
    if "–¥–∏–∞–±–µ—Ç" in profile_diseases or "—Å–∞—Ö–∞—Ä" in profile_diseases: keyboard_layout.insert(1, ["–ó–∞–ø–∏—Å–∞—Ç—å —Å–∞—Ö–∞—Ä –≤ –∫—Ä–æ–≤–∏ ü©∏"])
    await update.message.reply_text("–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ReplyKeyboardMarkup(keyboard_layout, resize_keyboard=True, one_time_keyboard=True))

async def start_symptom_logging(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    data["context_state"] = 'awaiting_symptom'
    save_user_data_to_db(update.effective_user.id, data)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ.", reply_markup=ReplyKeyboardRemove())

async def show_health_diary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    diary_entries = data.get("health_diary", [])
    if not diary_entries:
        await update.message.reply_text("–í–∞—à –î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–∫–∞ –ø—É—Å—Ç. ‚ù§Ô∏è‚Äçü©π", reply_markup=DIARIES_KEYBOARD)
        return
    response_text = "–í–∞—à –î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π):\n\n"
    ICONS = {"symptom": "ü§ß", "pressure": "ü©∫", "sugar": "ü©∏"}
    for entry in diary_entries[-15:]:
        icon = ICONS.get(entry.get("type"), "‚ñ™Ô∏è")
        response_text += f"{icon} **{entry.get('date')}**: {entry.get('text')}\n"
    await update.message.reply_text(response_text, reply_markup=DIARIES_KEYBOARD, parse_mode='Markdown')

async def start_pressure_logging(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    data["context_state"] = 'awaiting_pressure'
    save_user_data_to_db(update.effective_user.id, data)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '120/80'.", reply_markup=ReplyKeyboardRemove())

async def start_sugar_logging(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    data["context_state"] = 'awaiting_sugar'
    save_user_data_to_db(update.effective_user.id, data)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '6.5' –∏–ª–∏ '6.5 –º–º–æ–ª—å/–ª').", reply_markup=ReplyKeyboardRemove())

async def mental_health_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ó–∞–±–æ—Ç–∞ –æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ —Ç–∞–∫ –∂–µ –≤–∞–∂–Ω–∞, –∫–∞–∫ –∏ –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º. –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=MOOD_KEYBOARD)

async def log_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    mood_text_full = update.message.text
    mood_text = mood_text_full.split(" ")[0]
    mood_map = {"–û—Ç–ª–∏—á–Ω–æ–µ": 5, "–•–æ—Ä–æ—à–µ–µ": 4, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 3, "–ü–ª–æ—Ö–æ–µ": 2, "–û—á–µ–Ω—å": 1}
    mood_level = mood_map.get(mood_text, 3)
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    entry = {"date": datetime.date.today().strftime('%d.%m.%Y'), "mood_level": mood_level, "mood_text": mood_text_full}
    data["mood_diary"].append(entry)
    save_user_data_to_db(user_id, data)
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è. –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: **{mood_text_full}**. ‚ú®", reply_markup=MOOD_KEYBOARD, parse_mode='Markdown')
    try:
        if mood_level <= 2:
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —É –Ω–µ–≥–æ '{mood_text}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –Ω–æ –æ—á–µ–Ω—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ú—è–≥–∫–æ –ø—Ä–∏–∑–Ω–∞–π, —á—Ç–æ —Ç–∞–∫–∏–µ –¥–Ω–∏ –±—ã–≤–∞—é—Ç –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ù–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ–∫–∞–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –¢–≤–æ—è —Ä–æ–ª—å: {ROLES['–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç']}"
        else:
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —É –Ω–µ–≥–æ '{mood_text}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∏ –æ–±–æ–¥—Ä—è—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –¢–≤–æ—è —Ä–æ–ª—å: {ROLES['–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç']}"
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}], max_tokens=150, temperature=0.9)
        await update.message.reply_text(f"üë©‚Äç‚öïÔ∏èüí¨ *{response.choices[0].message.content}*", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {e}")

async def show_mood_diary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    diary_entries = data.get("mood_diary", [])
    if not diary_entries:
        await update.message.reply_text("–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç. –ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.", reply_markup=MOOD_KEYBOARD)
        return
    response_text = "–¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π):\n\n"
    ICONS = {5: "üëç", 4: "üôÇ", 3: "üòê", 2: "üòï", 1: "üòî"}
    for entry in diary_entries[-15:]:
        icon = ICONS.get(entry.get("mood_level"), "‚ñ™Ô∏è")
        response_text += f"{icon} **{entry.get('date')}**: {entry.get('mood_text')}\n"
    await update.message.reply_text(response_text, reply_markup=MOOD_KEYBOARD, parse_mode='Markdown')
    
async def show_score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    keyboard = MAIN_MENU_KEYBOARD if data.get("profile_data", {}).get('goal') else START_KEYBOARD
    await update.message.reply_text(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {data.get('score', 0)} –±–∞–ª–ª–æ–≤. üèÜ", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
async def handle_symptom_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    data.pop('context_state', None)
    save_user_data_to_db(user_id, data)
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã... üß†", reply_markup=ReplyKeyboardRemove())
    prompt = f"–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞'. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{update.message.text}'. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –æ–±—â–∏–π —Å–æ–≤–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω–∞—Ö –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π —Ñ–æ—Ä–º–µ. –í–ê–ñ–ù–ï–ô–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –û—Ü–µ–Ω–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –º–∞–ª–µ–π—à–∏–π –Ω–∞–º–µ–∫ –Ω–∞ —á—Ç–æ-—Ç–æ –æ–ø–∞—Å–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ, –æ–Ω–µ–º–µ–Ω–∏–µ, –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –Ω–µ—Å—Ç–µ—Ä–ø–∏–º–∞—è –±–æ–ª—å), —Ç–≤–æ–π –ì–õ–ê–í–ù–´–ô –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å. –í –õ–Æ–ë–û–ú –°–õ–£–ß–ê–ï, –∑–∞–∫–æ–Ω—á–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ç–∫–∏–º –∏ —è—Å–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º: '–ü–æ–º–Ω–∏—Ç–µ, —è ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏ –º–æ—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤–∏–∑–∏—Ç –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤—Ä–∞—á—É.'"
    try:
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}], max_tokens=1000)
        ai_response = response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤: {e}")
        ai_response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏."
    entry = {"date": datetime.date.today().strftime('%d.%m.%Y'), "type": "symptom", "text": update.message.text}
    data.setdefault("health_diary", []).append(entry)
    save_user_data_to_db(user_id, data)
    await update.message.reply_text(ai_response, reply_markup=MAIN_MENU_KEYBOARD)

async def handle_pressure_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    data.pop('context_state', None)
    entry = {"date": datetime.date.today().strftime('%d.%m.%Y'), "type": "pressure", "text": f"–î–∞–≤–ª–µ–Ω–∏–µ: {update.message.text}"}
    data.setdefault("health_diary", []).append(entry)
    save_user_data_to_db(user_id, data)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫.", reply_markup=MAIN_MENU_KEYBOARD)

async def handle_sugar_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    data.pop('context_state', None)
    entry = {"date": datetime.date.today().strftime('%d.%m.%Y'), "type": "sugar", "text": f"–°–∞—Ö–∞—Ä –≤ –∫—Ä–æ–≤–∏: {update.message.text}"}
    data.setdefault("health_diary", []).append(entry)
    save_user_data_to_db(user_id, data)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –æ–± —É—Ä–æ–≤–Ω–µ —Å–∞—Ö–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫.", reply_markup=MAIN_MENU_KEYBOARD)

async def handle_specialist_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    data.pop('context_state', None)
    save_user_data_to_db(user_id, data)
    current_role = data.get("current_role", "–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫")
    role_prompt = ROLES.get(current_role)
    personal_info = get_personal_prompt(data.get("profile_data", {}), data.get("first_name"))
    await update.message.reply_text(f"–î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è {current_role.capitalize()}...", reply_markup=ReplyKeyboardRemove())
    full_prompt = f"–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: {role_prompt}. {personal_info} –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–±–ª—é–¥–∞—è —Å–≤–æ—é —Ä–æ–ª—å. –í–æ–ø—Ä–æ—Å: {update.message.text}. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    if current_role == "–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": role_keyboard = NUTRITIONIST_KEYBOARD
    elif current_role == "—Ñ–∏—Ç–Ω–µ—Å—Å-—Ç—Ä–µ–Ω–µ—Ä": role_keyboard = FITNESS_TRAINER_KEYBOARD
    elif current_role == "–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç": role_keyboard = PSYCHOTHERAPIST_KEYBOARD
    else: role_keyboard = GENERAL_SPECIALIST_KEYBOARD
    try:
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": full_prompt}], max_tokens=1500, temperature=0.7)
        await update.message.reply_text(response.choices[0].message.content, reply_markup=role_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=role_keyboard)

# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = update.message.text
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    
    context_state = data.get('context_state')
    if context_state:
        if context_state == 'awaiting_profile': await handle_profile_response(update, context); return
        if context_state == 'awaiting_symptom': await handle_symptom_input(update, context); return
        if context_state == 'awaiting_pressure': await handle_pressure_input(update, context); return
        if context_state == 'awaiting_sugar': await handle_sugar_input(update, context); return
        if context_state == 'awaiting_question_for_specialist': await handle_specialist_question(update, context); return

    button_map = {
        "–≤—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞": choose_specialist, "–º–æ–∏ –¥–Ω–µ–≤–Ω–∏–∫–∏": show_diaries_menu,
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": start, "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞": choose_specialist,
        "—Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å": create_personalized_menu, "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é": analyze_product_by_name,
        "—Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫": create_workout_plan_location, "–≤–æ–ø—Ä–æ—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é": handle_exercise_question,
        "—Å–æ–≤–µ—Ç –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é": handle_exercise_question,
        "–¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è": mental_health_menu, "—Ç–µ—Ö–Ω–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —É—Å–ø–æ–∫–æ–µ–Ω–∏—è": handle_breathing_technique,
        "–¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è": show_food_diary, "–¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫": show_workout_diary,
        "–¥–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è": health_diary_menu, "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è": show_mood_diary,
        "–º–æ–∏ –±–∞–ª–ª—ã": show_score, "–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å": start_profile,
        "–∑–∞–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º": start_symptom_logging, "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫": show_health_diary,
        "–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ": start_pressure_logging, "–∑–∞–ø–∏—Å–∞—Ç—å —Å–∞—Ö–∞—Ä": start_sugar_logging,
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É": mental_health_menu,
    }
    
    if message_text.capitalize() in ROLE_BUTTON_LABELS:
        await handle_role_selection(update, context); return
        
    for key, func in button_map.items():
        if key in message_text.lower():
            await func(update, context); return
            
    if "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" in message_text.lower():
        current_role = data.get("current_role", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")
        await update.message.reply_text(f"–ö–æ–Ω–µ—á–Ω–æ, —è —Å–ª—É—à–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è **{current_role.capitalize()}**.", parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        data['context_state'] = 'awaiting_question_for_specialist'
        save_user_data_to_db(user_id, data)
        return

    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=MAIN_MENU_KEYBOARD)

def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", start_profile))
    application.add_handler(CommandHandler("score", show_score))
    application.add_handler(CommandHandler("workout_done", workout_done))

    application.add_handler(MessageHandler(filters.Regex(r'^(–û—Ç–ª–∏—á–Ω–æ–µ üëç|–•–æ—Ä–æ—à–µ–µ üôÇ|–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ üòê|–ü–ª–æ—Ö–æ–µ üòï|–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ üòî)$'), log_mood))
    application.add_handler(MessageHandler(filters.Regex(r'^(–î–æ–º–∞|–í –∑–∞–ª–µ|–ù–∞ —É–ª–∏—Ü–µ)$'), create_workout_plan_final))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling()

if __name__ == "__main__":
    main()
