import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import base64
import json
import re
from replit import db
import datetime

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ö–ª—é—á–∏ TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Secrets!")

client = openai.OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –†–æ–ª–µ–≤—ã–µ –º–æ–¥–µ–ª–∏ ---
ROLES = {
    "—Ñ–∏—Ç–Ω–µ—Å—Å-—Ç—Ä–µ–Ω–µ—Ä": "–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ç–æ—á–Ω—ã, –Ω–∞—É—á–Ω—ã –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—Ç –∫–∞–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.",
    "–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –∫–æ—É—á –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–Ω—è, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ.",
    "–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏ –∏ –±–∏–æ—Ö–∏–º–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Ü–∏–æ–Ω—ã, –æ–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–æ–ª—å –º–∏–∫—Ä–æ/–º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã –∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –Ω–∞—É–∫–µ.",
    "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫": "–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –ª–µ–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –æ–±—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å –æ–≥–æ–≤–æ—Ä–∫–æ–π, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–∞—á–∞. –ì–æ–≤–æ—Ä–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º'.",
    "–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç": "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –º—É–¥—Ä—ã–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–µ—Ö–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è, –∑–∞–¥–∞–µ—à—å –º—è–≥–∫–∏–µ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Å—É–∂–¥–∞–µ—à—å. –¢–≤–æ—è —Ä–µ—á—å —Å–ø–æ–∫–æ–π–Ω–∞—è –∏ –≤—Å–µ–ª—è—é—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.",
    "—Ç—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ": "–¢—ã ‚Äî —ç—Ç–æ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ. –¢—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥ –≤—Å–µ—Ö —Ü–µ–ª–µ–π, –æ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—á—Ç–∞–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –º—É–¥—Ä—ã–µ, –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–≤–µ—Ç—ã, –Ω–∞–º–µ–∫–∞—è –Ω–∞ –±—É–¥—É—â–∏–µ —É—Å–ø–µ—Ö–∏. –ì–æ–≤–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—Ä–∞–∑—ã '–Ø –ø–æ–º–Ω—é, –∫–∞–∫ —Ç—ã —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–∏–ª—Å—è...', '–ù–µ —Å–æ–º–Ω–µ–≤–∞–π—Å—è, —ç—Ç–æ—Ç —à–∞–≥ –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –∫...'.",
}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
START_KEYBOARD = ReplyKeyboardMarkup([
    ["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å"],
    ["–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è", "–ú–æ–∏ –±–∞–ª–ª—ã"],
], resize_keyboard=True)

COMPLETED_PROFILE_KEYBOARD = ReplyKeyboardMarkup([
    ["–°–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é üçΩÔ∏è", "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™"],
    ["–î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è ‚ù§Ô∏è‚Äçü©π", "–ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ üß†"],
    ["–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è ü•ï", "–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üèãÔ∏è"],
    ["–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å üé≠", "–ú–æ–∏ –±–∞–ª–ª—ã üèÜ"]
], resize_keyboard=True)

HEALTH_KEYBOARD_BASE = [
    ["–ó–∞–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º ü§ß", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ üìñ"],
    ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è"]
]

MOOD_KEYBOARD = ReplyKeyboardMarkup([
    ["–û—Ç–ª–∏—á–Ω–æ–µ üëç", "–•–æ—Ä–æ—à–µ–µ üôÇ"],
    ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ üòê"],
    ["–ü–ª–æ—Ö–æ–µ üòï", "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ üòî"],
    ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üìä", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è"]
], resize_keyboard=True)

ROLE_BUTTON_LABELS = [role.capitalize() for role in ROLES.keys()]
ROLE_BUTTONS = [[label] for label in ROLE_BUTTON_LABELS]
ROLE_KEYBOARD = ReplyKeyboardMarkup(ROLE_BUTTONS, one_time_keyboard=True, resize_keyboard=True)

PROFILE_QUESTIONS = [
    "profile_state_gender", "profile_state_age", "profile_state_height",
    "profile_state_weight", "profile_state_activity", "profile_state_goal",
    "profile_state_diseases", "profile_state_allergies"
]
GENDER_KEYBOARD = [["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]]
ACTIVITY_KEYBOARD = [["–°–∏–¥—è—á–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–ê–∫—Ç–∏–≤–Ω—ã–π"]]
GOAL_KEYBOARD = [["–ü–æ—Ö—É–¥–µ—Ç—å", "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"]]
WORKOUT_PLACE_KEYBOARD = [["–î–æ–º–∞", "–í –∑–∞–ª–µ", "–ù–∞ —É–ª–∏—Ü–µ"]]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def get_user_data_from_db(user_id):
    key = str(user_id)
    if key in db:
        data = json.loads(db[key])
        data.setdefault("workout_diary", [])
        data.setdefault("health_diary", [])
        data.setdefault("mood_diary", [])
        return data
    else:
        default_data = {
            "current_role": "–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫", "profile_data": {}, "score": 0,
            "food_diary": [], "workout_diary": [], "health_diary": [], "mood_diary": [],
            "first_name": "", "last_name": ""
        }
        db[key] = json.dumps(default_data)
        return default_data

def save_user_data_to_db(user_id, data):
    key = str(user_id)
    db[key] = json.dumps(data)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def encode_image(image_bytes):
    return base64.b64encode(image_bytes).decode('utf-8')

def get_personal_prompt(user_profile_data: dict, first_name: str = None) -> str:
    if not user_profile_data or not user_profile_data.get('goal'):
        return ""
    parts = []
    if first_name: parts.append(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_name}")
    if 'gender' in user_profile_data: parts.append(f"–ø–æ–ª: {user_profile_data['gender'].lower()}")
    if 'age' in user_profile_data: parts.append(f"–≤–æ–∑—Ä–∞—Å—Ç: {user_profile_data['age']} –ª–µ—Ç")
    if 'height' in user_profile_data: parts.append(f"—Ä–æ—Å—Ç: {user_profile_data['height']} —Å–º")
    if 'weight' in user_profile_data: parts.append(f"–≤–µ—Å: {user_profile_data['weight']} –∫–≥")
    if 'activity' in user_profile_data: parts.append(f"–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {user_profile_data['activity'].lower()}")
    if 'goal' in user_profile_data: parts.append(f"—Ü–µ–ª—å: {user_profile_data['goal'].lower()}")
    if 'diseases' in user_profile_data and user_profile_data['diseases'].lower() not in ['–Ω–µ—Ç', 'no']:
        parts.append(f"—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {user_profile_data['diseases']}")
    if 'allergies' in user_profile_data and user_profile_data['allergies'].lower() not in ['–Ω–µ—Ç', 'no']:
        parts.append(f"–∞–ª–ª–µ—Ä–≥–∏–∏: {user_profile_data['allergies']}")
    return f"–£—á–∏—Ç—ã–≤–∞–π –≤ –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ —Å–µ–±–µ: {', '.join(parts)}. " if parts else ""

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    data = get_user_data_from_db(user.id)
    data["first_name"] = user.first_name
    save_user_data_to_db(user.id, data)
    keyboard = COMPLETED_PROFILE_KEYBOARD if data.get("profile_data", {}).get('goal') else START_KEYBOARD
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ–Ω—Å—å–µ—Ä–∂ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –∏ —Ä–∞–∑—É–º, –ø–∏—Ç–∞—Ç—å—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –∂–∏–∑–Ω–∏.\n\n"
        "–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è? üëá\n\n"
        "<i>I heal you! ‚ô•Ô∏è</i>",
        reply_markup=keyboard
    )

async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ö–∞–∫—É—é —Ä–æ–ª—å —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω—è–ª?", reply_markup=ROLE_KEYBOARD)

async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    requested_role_display = update.message.text
    requested_role = requested_role_display.lower().replace('-', ' ')
    data = get_user_data_from_db(user_id)
    keyboard = COMPLETED_PROFILE_KEYBOARD if data.get("profile_data", {}).get('goal') else START_KEYBOARD

    if requested_role in ROLES:
        data["current_role"] = requested_role
        save_user_data_to_db(user_id, data)
        try:
            prompt = f"–¢–≤–æ—è –Ω–æ–≤–∞—è —Ä–æ–ª—å: {ROLES[requested_role]}. –ù–∞–ø–∏—à–∏ –û–ß–ï–ù–¨ –∫–æ—Ä–æ—Ç–∫–æ–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –ª–∏—Ü–∞ —ç—Ç–æ–π —Ä–æ–ª–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è, —á—Ç–æ —Ç—ã –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∂–∏–≤–∏—Å—å –≤ —Ä–æ–ª—å."
            response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}], max_tokens=100, temperature=0.8)
            greeting = response.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ–ª–∏: {e}")
            greeting = f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∫–∞–∫ **{requested_role_display}**."
        await update.message.reply_text(greeting, reply_markup=keyboard, parse_mode='Markdown')
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–∞–∫—É—é —Ä–æ–ª—å.", reply_markup=keyboard)

async def show_roles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    keyboard = COMPLETED_PROFILE_KEYBOARD if data.get("profile_data", {}).get('goal') else START_KEYBOARD
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–µ–≤—ã–µ –º–æ–¥–µ–ª–∏:\n" + "\n".join([f"- **{role.capitalize()}**: {desc.split('.')[0]}" for role, desc in ROLES.items()]) + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π /role –¥–ª—è –≤—ã–±–æ—Ä–∞.", reply_markup=keyboard, parse_mode='Markdown')

async def reminders_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    keyboard = COMPLETED_PROFILE_KEYBOARD if data.get("profile_data", {}).get('goal') else START_KEYBOARD
    await update.message.reply_text(
        "‚è∞ **–û –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö** ‚è∞\n\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –Ω–µ —É–º–µ—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–µ—Å—Ç—å –≤ 14:00'). –≠—Ç–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è.\n\n"
        "**–ù–æ –µ—Å—Ç—å –∫–æ–µ-—á—Ç–æ –ø–æ–ª—É—á—à–µ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏!** üëá\n"
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /workout_done. –¢—ã –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—à—å üèÜ **15 –±–∞–ª–ª–æ–≤**, –Ω–æ –∏ —Å–º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å. –≠—Ç–æ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç–æ–Ω—É—Å–µ!\n\n"
        "I heal you! ‚ô•Ô∏è",
        reply_markup=keyboard
    )

# --- –†–∞–∑–¥–µ–ª –ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è ---
async def mental_health_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ó–∞–±–æ—Ç–∞ –æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ —Ç–∞–∫ –∂–µ –≤–∞–∂–Ω–∞, –∫–∞–∫ –∏ –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º. –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=MOOD_KEYBOARD)

async def log_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    mood_text_full = update.message.text
    mood_text = mood_text_full.split(" ")[0]
    mood_map = {"–û—Ç–ª–∏—á–Ω–æ–µ": 5, "–•–æ—Ä–æ—à–µ–µ": 4, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 3, "–ü–ª–æ—Ö–æ–µ": 2, "–û—á–µ–Ω—å": 1}
    mood_level = mood_map.get(mood_text, 3)

    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    entry = {"date": datetime.date.today().strftime('%d.%m.%Y'), "mood_level": mood_level, "mood_text": mood_text_full}
    data["mood_diary"].append(entry)
    save_user_data_to_db(user_id, data)

    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è. –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: **{mood_text_full}**. ‚ú®", reply_markup=MOOD_KEYBOARD, parse_mode='Markdown')

    try:
        if mood_level <= 2:
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —É –Ω–µ–≥–æ '{mood_text}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –Ω–æ –æ—á–µ–Ω—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ú—è–≥–∫–æ –ø—Ä–∏–∑–Ω–∞–π, —á—Ç–æ —Ç–∞–∫–∏–µ –¥–Ω–∏ –±—ã–≤–∞—é—Ç –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ù–µ –¥–∞–≤–∞–π –ø—Ä—è–º—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ–∫–∞–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –¢–≤–æ—è —Ä–æ–ª—å: {ROLES['–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç']}"
        else:
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —É –Ω–µ–≥–æ '{mood_text}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∏ –æ–±–æ–¥—Ä—è—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –¢–≤–æ—è —Ä–æ–ª—å: {ROLES['–ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç']}"
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}], max_tokens=150, temperature=0.9)
        await update.message.reply_text(f"üë©‚Äç‚öïÔ∏èüí¨ *{response.choices[0].message.content}*", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {e}")

async def show_mood_diary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    diary_entries = data.get("mood_diary", [])
    if not diary_entries:
        await update.message.reply_text("–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç. –ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.", reply_markup=MOOD_KEYBOARD)
        return
    response_text = "–¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π):\n\n"
    ICONS = {5: "üëç", 4: "üôÇ", 3: "üòê", 2: "üòï", 1: "üòî"}
    for entry in diary_entries[-15:]:
        icon = ICONS.get(entry.get("mood_level"), "‚ñ™Ô∏è")
        response_text += f"{icon} **{entry.get('date')}**: {entry.get('mood_text')}\n"
    await update.message.reply_text(response_text, reply_markup=MOOD_KEYBOARD, parse_mode='Markdown')

# --- –†–∞–∑–¥–µ–ª –î–Ω–µ–≤–Ω–∏–∫–∞ –ó–¥–æ—Ä–æ–≤—å—è ---
async def health_diary_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    profile_diseases = get_user_data_from_db(update.effective_user.id).get("profile_data", {}).get("diseases", "").lower()
    keyboard_layout = [row[:] for row in HEALTH_KEYBOARD_BASE]
    if "–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è" in profile_diseases or "–¥–∞–≤–ª–µ–Ω–∏–µ" in profile_diseases:
        keyboard_layout.insert(1, ["–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ ü©∫"])
    if "–¥–∏–∞–±–µ—Ç" in profile_diseases or "—Å–∞—Ö–∞—Ä" in profile_diseases:
        keyboard_layout.insert(1, ["–ó–∞–ø–∏—Å–∞—Ç—å —Å–∞—Ö–∞—Ä –≤ –∫—Ä–æ–≤–∏ ü©∏"])
    await update.message.reply_text("–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è. –û–Ω –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –≤–∞–∂–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(keyboard_layout, resize_keyboard=True, one_time_keyboard=True))

async def start_symptom_logging(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['context_state'] = 'awaiting_symptom'
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ.", reply_markup=ReplyKeyboardRemove())

async def show_health_diary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = get_user_data_from_db(update.effective_user.id)
    keyboard = COMPLETED_PROFILE_KEYBOARD if data.get("profile_data", {}).get('goal') else START_KEYBOARD
    diary_entries = data.get("health_diary", [])
    if not diary_entries:
        await update.message.reply_text("–í–∞—à –î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–∫–∞ –ø—É—Å—Ç. ‚ù§Ô∏è‚Äçü©π", reply_markup=keyboard)
        return
    response_text = "–í–∞—à –î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π):\n\n"
    ICONS = {"symptom": "ü§ß", "pressure": "ü©∫", "sugar": "ü©∏"}
    for entry in diary_entries[-15:]:
        icon = ICONS.get(entry.get("type"), "‚ñ™Ô∏è")
        response_text += f"{icon} **{entry.get('date')}**: {entry.get('text')}\n"
    await update.message.reply_text(response_text, reply_markup=keyboard, parse_mode='Markdown')

async def start_pressure_logging(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['context_state'] = 'awaiting_pressure'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '120/80'.", reply_markup=ReplyKeyboardRemove())

async def start_sugar_logging(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['context_state'] = 'awaiting_sugar'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '6.5' –∏–ª–∏ '6.5 –º–º–æ–ª—å/–ª').", reply_markup=ReplyKeyboardRemove())

# --- –ü—Ä–æ—Ñ–∏–ª—å –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
async def start_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    data["profile_state"] = "awaiting_profile" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['profile_questions_index'] = 0
    context.user_data['profile_data'] = {}
    
    data["score"] += 10
    save_user_data_to_db(user_id, data)

    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ó–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 10 –±–∞–ª–ª–æ–≤! –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {data['score']}.\n"
                                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
                                    "–ù–∞–ø–∏—à–∏ `–û—Ç–º–µ–Ω–∞`, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø—Ä–æ—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
                                    reply_markup=ReplyKeyboardRemove())
    await ask_next_profile_question(update, context)

async def ask_next_profile_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    question_index = context.user_data.get('profile_questions_index', 0)
    
    if question_index >= len(PROFILE_QUESTIONS):
        await finalize_profile(update, context)
        return

    current_question_key = PROFILE_QUESTIONS[question_index]
    question_text = ""
    reply_markup = ReplyKeyboardRemove()

    if current_question_key == "profile_state_gender":
        question_text = "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:"
        reply_markup = ReplyKeyboardMarkup(GENDER_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    elif current_question_key == "profile_state_age": question_text = "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?"
    elif current_question_key == "profile_state_height": question_text = "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö? (–ù–∞–ø—Ä–∏–º–µ—Ä: 175)"
    elif current_question_key == "profile_state_weight": question_text = "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö? (–ù–∞–ø—Ä–∏–º–µ—Ä: 70.5)"
    elif current_question_key == "profile_state_activity":
        question_text = "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?"
        reply_markup = ReplyKeyboardMarkup(ACTIVITY_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    elif current_question_key == "profile_state_goal":
        question_text = "–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?"
        reply_markup = ReplyKeyboardMarkup(GOAL_KEYBOARD, one_time_keyboard=True, resize_keyboard=True)
    elif current_question_key == "profile_state_diseases": question_text = "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ `–ù–µ—Ç`."
    elif current_question_key == "profile_state_allergies": question_text = "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–∏—â–µ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ `–ù–µ—Ç`."
    
    await update.message.reply_text(question_text, reply_markup=reply_markup)

async def handle_profile_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_text = update.message.text
    
    if message_text and message_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_profile(update, context)
        return

    question_index = context.user_data.get('profile_questions_index', 0)
    current_question_key = PROFILE_QUESTIONS[question_index]
    profile_data = context.user_data.get('profile_data', {})
    
    valid = True
    error_message = ""
    
    try:
        if current_question_key == "profile_state_gender":
            if message_text.lower() in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]: profile_data["gender"] = message_text
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'."
        elif current_question_key == "profile_state_age":
            age = int(message_text)
            if 0 < age < 120: profile_data["age"] = age
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç."
        elif current_question_key == "profile_state_height":
            height = int(message_text)
            if 50 < height < 250: profile_data["height"] = height
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç."
        elif current_question_key == "profile_state_weight":
            weight = float(message_text.replace(',', '.'))
            if 20 < weight < 300: profile_data["weight"] = weight
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å."
        elif current_question_key == "profile_state_activity":
            if message_text.lower() in ["—Å–∏–¥—è—á–∏–π", "—É–º–µ—Ä–µ–Ω–Ω—ã–π", "–∞–∫—Ç–∏–≤–Ω—ã–π"]: profile_data["activity"] = message_text
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        elif current_question_key == "profile_state_goal":
            if message_text.lower() in ["–ø–æ—Ö—É–¥–µ—Ç—å", "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"]: profile_data["goal"] = message_text
            else: valid = False; error_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        elif current_question_key == "profile_state_diseases": profile_data["diseases"] = message_text
        elif current_question_key == "profile_state_allergies": profile_data["allergies"] = message_text
    except (ValueError, TypeError):
        valid = False
        error_message = "–ö–∞–∂–µ—Ç—Å—è, —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."

    if not valid:
        await update.message.reply_text(error_message)
        return

    context.user_data['profile_data'] = profile_data
    context.user_data['profile_questions_index'] += 1
    
    await ask_next_profile_question(update, context)

async def finalize_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    data = get_user_data_from_db(user_id)
    
    data["profile_data"] = context.user_data.get('profile_data', {})
    data["score"] += 20
    save_user_data_to_db(user_id, data)
    
    context.user_data.pop('profile_questions_index', None)
    context.user_data.pop('profile_data', None)
    data = get_user_data_from_db(user_id) # –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è
    data.pop('profile_state', None) # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_user_data_to_db(user_id, data)

    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –∑–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 20 –±–∞–ª–ª–æ–≤! –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {data['score']}.", reply_markup=COMPLETED_PROFILE_KEYBOARD)

async def cancel_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    context.user_data.pop('profile_questions_index', None)
    context.user_data.pop('profile_data', None)
    data = get_user_data_from_db(user_id)
    data.pop('profile_state', None)
    save_user_data_to_db(user_id, data)
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=START_KEYBOARD)

async def create_personalized_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    pass
    
async def create_workout_plan_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    pass

async def create_workout_plan_final(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    pass
    
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    pass

async def show_food_diary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    pass

async def show_score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    pass

async def workout_done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    pass

async def show_workout_diary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... –ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    pass

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
async def handle_symptom_input(update, context):
    context.user_data.pop('context_state')
    await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã... üß†", reply_markup=ReplyKeyboardRemove())
    prompt = f"–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞'. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{update.message.text}'. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –æ–±—â–∏–π —Å–æ–≤–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω–∞—Ö –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π —Ñ–æ—Ä–º–µ. –í–ê–ñ–ù–ï–ô–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –û—Ü–µ–Ω–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –º–∞–ª–µ–π—à–∏–π –Ω–∞–º–µ–∫ –Ω–∞ —á—Ç–æ-—Ç–æ –æ–ø–∞—Å–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ, –æ–Ω–µ–º–µ–Ω–∏–µ, –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –Ω–µ—Å—Ç–µ—Ä–ø–∏–º–∞—è –±–æ–ª—å), —Ç–≤–æ–π –ì–õ–ê–í–ù–´–ô –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å. –í –õ–Æ–ë–û–ú –°–õ–£–ß–ê–ï, –∑–∞–∫–æ–Ω—á–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ç–∫–∏–º –∏ —è—Å–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º: '–ü–æ–º–Ω–∏—Ç–µ, —è ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏ –º–æ—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤–∏–∑–∏—Ç –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤—Ä–∞—á—É.'"
    try:
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}], max_tokens=400)
        ai_response = response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤: {e}")
        ai_response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏."
    data = get_user_data_from_db(update.effective_user.id)
    entry = {"date": datetime.date.today().strftime('%d.%m.%Y'), "type": "symptom", "text": update.message.text}
    data.setdefault("health_diary", []).append(entry)
    save_user_data_to_db(update.effective_user.id, data)
    await update.message.reply_text(ai_response, reply_markup=COMPLETED_PROFILE_KEYBOARD)

async def handle_pressure_input(update, context):
    context.user_data.pop('context_state')
    data = get_user_data_from_db(update.effective_user.id)
    entry = {"date": datetime.date.today().strftime('%d.%m.%Y'), "type": "pressure", "text": f"–î–∞–≤–ª–µ–Ω–∏–µ: {update.message.text}"}
    data.setdefault("health_diary", []).append(entry)
    save_user_data_to_db(update.effective_user.id, data)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫.", reply_markup=COMPLETED_PROFILE_KEYBOARD)

async def handle_sugar_input(update, context):
    context.user_data.pop('context_state')
    data = get_user_data_from_db(update.effective_user.id)
    entry = {"date": datetime.date.today().strftime('%d.%m.%Y'), "type": "sugar", "text": f"–°–∞—Ö–∞—Ä –≤ –∫—Ä–æ–≤–∏: {update.message.text}"}
    data.setdefault("health_diary", []).append(entry)
    save_user_data_to_db(update.effective_user.id, data)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –æ–± —É—Ä–æ–≤–Ω–µ —Å–∞—Ö–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫.", reply_markup=COMPLETED_PROFILE_KEYBOARD)

# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_text = update.message.text

    # --- –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
    context_state = context.user_data.get('context_state')
    if context_state == 'awaiting_symptom':
        await handle_symptom_input(update, context)
        return
    if context_state == 'awaiting_pressure':
        await handle_pressure_input(update, context)
        return
    if context_state == 'awaiting_sugar':
        await handle_sugar_input(update, context)
        return
    
    data = get_user_data_from_db(user_id)
    if data.get('profile_state') == 'awaiting_profile':
         await handle_profile_response(update, context)
         return

    # --- –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ ---
    button_map = {
        "—Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é": create_personalized_menu, "–ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫": create_workout_plan_location,
        "–¥–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è": health_diary_menu, "–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ": mental_health_menu,
        "–¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è": show_food_diary, "–¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫": show_workout_diary,
        "–≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å": set_role, "–º–æ–∏ –±–∞–ª–ª—ã": show_score,
        "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": start, "–∑–∞–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º": start_symptom_logging,
        "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫": show_health_diary, "–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ": start_pressure_logging,
        "–∑–∞–ø–∏—Å–∞—Ç—å —Å–∞—Ö–∞—Ä": start_sugar_logging, "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è": show_mood_diary,
        "–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å": start_profile
    }
    for key, func in button_map.items():
        if key in message_text.lower():
            await func(update, context)
            return

    # --- –û—Ç–≤–µ—Ç AI –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã ---
    if not data.get("profile_data", {}).get('goal'):
        await update.message.reply_text("–ß—Ç–æ–±—ã —è –º–æ–≥ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.", reply_markup=START_KEYBOARD)
        return

    current_role_name = data.get("current_role", "–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫")
    role_prompt = ROLES.get(current_role_name, ROLES["–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"])
    personal_info = get_personal_prompt(data.get("profile_data", {}), data.get("first_name"))
    full_prompt = f"–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: {role_prompt}. {personal_info} –û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–±–ª—é–¥–∞—è —Å–≤–æ—é —Ä–æ–ª—å. –ó–∞–ø—Ä–æ—Å: {message_text}"
    
    await update.message.reply_chat_action(action='typing')
    try:
        response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": full_prompt}], max_tokens=500, temperature=0.7)
        await update.message.reply_text(response.choices[0].message.content, reply_markup=COMPLETED_PROFILE_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=COMPLETED_PROFILE_KEYBOARD)

def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("role", set_role))
    application.add_handler(CommandHandler("roles", show_roles))
    application.add_handler(CommandHandler("profile", start_profile))
    application.add_handler(CommandHandler("score", show_score))
    application.add_handler(CommandHandler("reminders", reminders_info))
    application.add_handler(CommandHandler("myworkouts", show_workout_diary))
    application.add_handler(CommandHandler("health", health_diary_menu))
    application.add_handler(CommandHandler("mental_health", mental_health_menu))

    application.add_handler(MessageHandler(filters.Regex(r'^(–û—Ç–ª–∏—á–Ω–æ–µ üëç|–•–æ—Ä–æ—à–µ–µ üôÇ|–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ üòê|–ü–ª–æ—Ö–æ–µ üòï|–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ üòî)$'), log_mood))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
